{"version":3,"sources":["getWeb3.js","components/Table.js","components/Identicon.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","WALLET_VIEW","Table","heading","this","props","body","style","width","map","head","row","approve","deposit","withdraw","view","Component","TableRow","name","walletBalance","nftBalance","src","icon","className","alt","Button","disabled","approved","onClick","address","StyledIdenticon","styled","div","Identicon","ref","useRef","account","useEthers","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","slice","library","add","fab","faCheckSquare","faChevronRight","faTimesCircle","INFINITE","fetchAllTokens","networkId","TokenA","networks","contractName","TokenB","TokenC","getExistingNftInstance","trustlessTrust","methods","balanceOf","call","balance","tokenOfOwnerByIndex","tokenId","mintNewInstance","mint","send","from","location","reload","App","state","storageValue","accounts","contract","sidebarOpen","assetAddress","onSetSidebarOpen","bind","approveToken","eth","Contract","ERC20ABI","abi","token","_address","depositToken","trustlessTrustId","withdrawToken","componentDidMount","getAccounts","net","getId","supportedTokens","TrustlessTrust","setState","runExample","alert","error","t","allowance","connectedWallet","open","document","querySelectorAll","forEach","x","classList","substring","filter","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"22ksDAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,uCCDvBQ,EAAc,cAGdC,EAAb,4JACE,WAAU,IAAD,OACDC,EAAUC,KAAKC,MAAMF,QACrBG,EAAOF,KAAKC,MAAMC,KACtB,OACI,wBAAOC,MAAO,CAAEC,MAAO,KAAvB,UACI,gCACE,oCACGL,QADH,IACGA,OADH,EACGA,EAASM,KAAI,SAAAC,GAAI,OAAI,6BAAKA,WAG/B,gCACKJ,EAAKG,KAAI,SAAAE,GAAG,OAAI,cAAC,EAAD,CACfA,IAAKA,EACLC,QAAS,EAAKP,MAAMO,QACpBC,QAAS,EAAKR,MAAMQ,QACpBC,SAAU,EAAKT,MAAMS,SACrBC,KAAM,EAAKV,MAAMU,mBAjBrC,GAA2BC,aAyBrBC,E,4JACJ,WACI,IAAMN,EAAMP,KAAKC,MAAMM,IACjBC,EAAUR,KAAKC,MAAMO,QACrBC,EAAUT,KAAKC,MAAMQ,QACrBC,EAAWV,KAAKC,MAAMS,SACtBC,EAAOX,KAAKC,MAAMU,KACxB,OACI,+BACE,6BACGJ,EAAIO,OAEP,6BACKH,IAASd,EACRU,EAAIQ,cAEJR,EAAIS,aAGV,6BACE,qBAAKC,IAAKV,EAAIW,KAAMC,UAAU,YAAYC,IAAI,OAE9CZ,EACA,6BACE,cAACa,EAAA,EAAD,CAAQC,SAAUf,EAAIgB,SAAUC,QAAS,kBAAIhB,EAAQD,EAAIkB,UAAzD,SACE,+CAII,uBAERhB,EACA,6BACE,cAACY,EAAA,EAAD,CAAQC,UAAWf,EAAIgB,SAAUC,QAAS,kBAAIf,EAAQF,EAAIkB,UAA1D,SACE,+CAII,uBAERf,EACA,6BACE,cAACW,EAAA,EAAD,CAAQC,UAAWf,EAAIgB,SAAUC,QAAS,kBAAId,EAASH,EAAIkB,UAA3D,SACE,gDAII,8B,GA/CCb,a,yCC3BjBc,EAAkBC,IAAOC,IAAV,qHAON,SAASC,IACtB,IAAMC,EAAMC,mBACJC,EAAYC,cAAZD,QASR,OAPAE,qBAAU,WACJF,GAAWF,EAAIK,UACjBL,EAAIK,QAAQC,UAAY,GACxBN,EAAIK,QAAQE,YAAYC,IAAS,GAAIC,SAASP,EAAQQ,MAAM,EAAG,IAAK,SAErE,CAACR,IAEG,cAACN,EAAD,CAAiBI,IAAKA,I,kDCE/BW,IAAQC,IAAIC,IAAKC,IAAeC,IAAgBC,KAEhD,IAAMC,EAAW,iFAEV,SAAeC,EAAtB,oC,4CAAO,WAA8B3D,EAAM4D,GAApC,SAAA9D,EAAA,+EAGE,CACL,CACEsC,QAASyB,EAAOC,SAASF,GAAWxB,QACpCX,KAAMoC,EAAOE,aACblC,KAAM,yFAER,CACEO,QAAS4B,EAAOF,SAASF,GAAWxB,QACpCX,KAAMuC,EAAOD,aACblC,KAAM,0FAER,CACEO,QAAS6B,EAAOH,SAASF,GAAWxB,QACpCX,KAAMwC,EAAOF,aACblC,KAAM,4FAjBL,4C,sBAsBA,IAAMqC,EAAsB,uCAAG,WAAOvB,EAASwB,GAAhB,iBAAArE,EAAA,sEACdqE,EAAeC,QAAQC,UAAU1B,GAAS2B,OAD5B,UAC9BC,EAD8B,OAEpCpE,QAAQC,IAAR,gBAAkBmE,MACdA,EAAU,GAHsB,yCAGZ,IAAI9E,SAAQ,SAACC,EAASC,GAAaD,GAAS,OAHhC,uBAKhByE,EAAeC,QAAQI,oBAAoB7B,EAAS,GAAG2B,OALvC,cAKhCG,EALgC,yBAM7B,IAAIhF,SAAQ,SAACC,EAASC,GAAaD,EAAQ+E,OANd,4CAAH,wDAStBC,EAAe,uCAAG,WAAO/B,EAASwB,GAAhB,SAAArE,EAAA,sEACNqE,EAAeC,QAAQO,KAAKhC,GAASiC,KAAK,CAACC,KAAMlC,IAD3C,cAE7B/C,OAAOkF,SAASC,SAFa,2CAAH,wDAyNbC,E,4MAnNbC,MAAQ,CACNC,aAAc,EACdlF,KAAM,KACNmF,SAAU,KACVC,SAAU,KACVC,aAAa,EACbC,aAAc,M,EAGhBC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gB,EAOnBC,a,uCAAe,WAAOrD,GAAP,eAAAtC,EAAA,sEACK,IAAI,EAAKmF,MAAMjF,KAAK0F,IAAIC,SACxC,EAAKV,MAAMW,SAASC,IACpBzD,GAHW,cACT0D,EADS,gBAMPA,EAAM1B,QAAQjD,QAAQ,EAAK8D,MAAMd,eAAe4B,SAAUrC,GAAUkB,KAAK,CAAEC,KAAM,EAAKI,MAAME,SAAS,KAN9F,OAObvF,OAAOkF,SAASC,SAPH,2C,wDAUfiB,a,uCAAe,WAAO5D,GAAP,iBAAAtC,EAAA,sEACK,IAAI,EAAKmF,MAAMjF,KAAK0F,IAAIC,SACxC,EAAKV,MAAMW,SAASC,IACpBzD,GAHW,cACT0D,EADS,gBAMSA,EAAM1B,QAAQC,UAAU,EAAKY,MAAME,SAAS,IAAIb,OANzD,cAMPC,EANO,gBAOP,EAAKU,MAAMd,eAAeC,QAAQhD,QAAQ,EAAK6D,MAAMgB,iBAAkB,CAAC7D,GAAU,CAACmC,IAAUK,KAAK,CAACC,KAAO,EAAKI,MAAME,SAAS,KAPvH,OAQbvF,OAAOkF,SAASC,SARH,2C,wDAWfmB,c,uCAAgB,WAAO9D,GAAP,eAAAtC,EAAA,sEACQ,EAAKmF,MAAMd,eAAeC,QAAQC,UAAU,EAAKY,MAAMgB,iBAAkB7D,GAASkC,OAD1F,cACRC,EADQ,gBAER,EAAKU,MAAMd,eAAeC,QAAQ/C,SAAS,EAAK4D,MAAMgB,iBAAkB,CAAC7D,GAAU,CAACmC,IAAUK,KAAK,CAACC,KAAO,EAAKI,MAAME,SAAS,KAFvH,OAGdvF,OAAOkF,SAASC,SAHF,2C,wDAMhBoB,kB,sBAAoB,sCAAArG,EAAA,+EAGGN,IAHH,cAGVQ,EAHU,gBAMOA,EAAK0F,IAAIU,cANhB,cAMVjB,EANU,gBASQnF,EAAK0F,IAAIW,IAAIC,QATrB,UAUE,aADZ1C,EATU,4EAYcD,EAAe3D,EAAM4D,GAZnC,eAYV2C,EAZU,iBAca,IAAIvG,EAAK0F,IAAIC,SACxCa,EAAeX,IACfW,EAAe1C,SAASF,GAAWxB,SAhBrB,eAcV+B,EAdU,OAmBhBhE,QAAQC,IAAI+E,EAAS,IAnBL,UAqBejB,EAAuBiB,EAAS,GAAIhB,GArBnD,QAqBV8B,EArBU,OAuBhB9F,QAAQC,IAAI6F,GAIZ,EAAKQ,SAAS,CAAEzG,OAAMmF,WAAUoB,kBAAiBpC,iBAAgByB,WAAUK,oBAAoB,EAAKS,YA3BpF,kDA8BhBC,MAAM,0EAGNxG,QAAQyG,MAAR,MAjCgB,0D,EAqCpBF,W,sBAAa,8CAAA5G,EAAA,wDACmE,EAAKmF,MAA3EjF,EADG,EACHA,KAAMmF,EADH,EACGA,SAAUoB,EADb,EACaA,gBAAiBpC,EAD9B,EAC8BA,eAAgB8B,EAD9C,EAC8CA,iBAD9C,cAGGM,GAHH,gEAGFM,EAHE,iBAIS,IAAI7G,EAAK0F,IAAIC,SAC7BC,EAASC,IACTgB,EAAEzE,SANK,cAIL0D,EAJK,iBAQeA,EAAM1B,QAAQC,UAAUc,EAAS,IAAIb,OARpD,eAQTuC,EAAEnF,cARO,iBASYyC,EAAeC,QAAQC,UAAU4B,EAAkBY,EAAEzE,SAASkC,OAT1E,eASTuC,EAAElF,WATO,iBAUWmE,EAAM1B,QAAQ0C,UAAU3B,EAAS,GAAIhB,EAAe4B,UAAUzB,OAVzE,oBAUTuC,EAAE3E,SAA4F,MAVrF,oJAuBX,EAAKuE,SAAS,CAAEM,gBAAiB5B,EAAS,KAvB/B,gE,sDArEb,SAAiB6B,GACfrG,KAAK8F,SAAS,CAAEpB,YAAa2B,IAC7BC,SAASC,iBAAiB,uBAAuBC,SAAQ,SAAAC,GAAC,OAAIA,EAAEC,UAAUhE,IAAI2D,EAAO,cAAgB,sB,oBA6FvG,WAAU,IAAD,OACP,OAAKrG,KAAKsE,MAAMjF,KAId,sBAAK8B,UAAU,MAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAACE,EAAA,EAAD,UACIrB,KAAKsE,MAAME,SAAS,GACpB,8DAC6BxE,KAAKsE,MAAME,SAAS,GAAGmC,UAAU,EAAG,GADjE,SAC0E,cAAC9E,EAAD,OAG5E,kEAOJ,sBAAKV,UAAU,OAAf,UACE,gDACA,uJAGA,+BACE,kGAGA,iFAGA,uDAGA,kGAKF,sDAEA,cAACE,EAAA,EAAD,CAAQG,QAAS,kBAAIuC,EAAgB,EAAKO,MAAME,SAAS,GAAI,EAAKF,MAAMd,iBAAiBlC,SAAUtB,KAAKsE,MAAMgB,kBAAoB,EAAlI,kBAGA,6BACEtF,KAAKsE,MAAMgB,kBAAoB,EAC/B,gCACE,4EAC2CtF,KAAKsE,MAAMd,eAAe4B,SADrE,IACgFpF,KAAKsE,MAAMgB,iBAD3F,OAGA,cAAC,EAAD,CACEpF,KAAMF,KAAKsE,MAAMsB,gBAAgBgB,QAAO,SAACV,GAAD,OAAOA,EAAElF,WAAa,KAC9DN,SAAUV,KAAKuF,cACf5E,KF7NQ,gBEiOZ,2BAIF,6DAEA,cAAC,EAAD,CACET,KAAMF,KAAKsE,MAAMsB,gBAAgBgB,QAAO,SAACV,GAAD,OAAOA,EAAEnF,cAAgB,KACjEP,QAASR,KAAK8E,aACdrE,QAAST,KAAKqF,aACd1E,KAAMd,UAlEL,8E,GA7GKe,aCrDEiG,QACW,cAA7B5H,OAAOkF,SAAS2C,UAEe,UAA7B7H,OAAOkF,SAAS2C,UAEhB7H,OAAOkF,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASX,SAASY,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a466f9e3.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n\nexport const WALLET_VIEW = 'wallet_view'\nexport const NFT_VIEW = 'nft_view'\n\nexport class Table extends Component {\n  render() {\n      var heading = this.props.heading;\n      var body = this.props.body;\n      return (\n          <table style={{ width: 500 }}>\n              <thead>\n                <tr>\n                  {heading?.map(head => <th>{head}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                  {body.map(row => <TableRow \n                    row={row} \n                    approve={this.props.approve} \n                    deposit={this.props.deposit} \n                    withdraw={this.props.withdraw} \n                    view={this.props.view} \n                  />)}\n              </tbody>\n          </table>\n      );\n  }\n}\n\nclass TableRow extends Component {\n  render() {\n      const row = this.props.row;\n      const approve = this.props.approve;\n      const deposit = this.props.deposit;\n      const withdraw = this.props.withdraw;\n      const view = this.props.view;\n      return (\n          <tr>\n            <td>\n              {row.name}\n            </td>\n            <td>\n              { (view === WALLET_VIEW) ?\n                  row.walletBalance\n                :\n                  row.nftBalance\n              }\n            </td>\n            <td>\n              <img src={row.icon} className=\"tokenLogo\" alt=\"\"></img>\n            </td>\n            { approve ?\n              <td>\n                <Button disabled={row.approved} onClick={()=>approve(row.address)}>\n                  <span>\n                    Approve\n                  </span>\n                </Button>\n              </td> : <td></td>\n            }\n            { deposit ?\n              <td>\n                <Button disabled={!row.approved} onClick={()=>deposit(row.address)}>\n                  <span>\n                    Deposit\n                  </span>\n                </Button>\n              </td> : <td></td>\n            }\n            { withdraw ?\n              <td>\n                <Button disabled={!row.approved} onClick={()=>withdraw(row.address)}>\n                  <span>\n                    Withdraw\n                  </span>\n                </Button>\n              </td> : <td></td>\n            }\n          </tr>\n      )\n  }\n}","import { useEffect, useRef } from \"react\";\nimport { useEthers } from \"@usedapp/core\";\nimport styled from \"@emotion/styled\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nconst StyledIdenticon = styled.div`\n  height: 1rem;\n  width: 1rem;\n  border-radius: 1.125rem;\n  background-color: black;\n`;\n\nexport default function Identicon() {\n  const ref = useRef();\n  const { account } = useEthers();\n\n  useEffect(() => {\n    if (account && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\n    }\n  }, [account]);\n  \n  return <StyledIdenticon ref={ref} />\n}\n","import React, { Component, useState, useEffect } from \"react\";\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\nimport getWeb3 from \"./getWeb3\";\n// import Sidebar from \"react-sidebar\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faTimesCircle, faChevronRight } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { Table, WALLET_VIEW, NFT_VIEW } from \"./components/Table.js\"\nimport Identicon from \"./components/Identicon.js\"\n\n// Generic ERC20 interface\nimport ERC20ABI from \"./contracts/ERC20.json\";\n\n// Trustless Trust\nimport TrustlessTrust from \"./contracts/TrustlessTrust.json\";\n\n// In production we'd load this information from github, but alas\nimport TokenA from \"./contracts/TokenA.json\";\nimport TokenB from \"./contracts/TokenB.json\";\nimport TokenC from \"./contracts/TokenC.json\";\n\nimport \"./App.scss\";\n\nlibrary.add(fab, faCheckSquare, faChevronRight, faTimesCircle)\n\nconst INFINITE = '115792089237316195423570985008687907853269984665640564039457584007913129639935';\n\nexport async function fetchAllTokens(web3, networkId) {\n  // Here we'd reach into the Uniswap github or something to get the definitive list of all tokens,\n  // addresses, icons, etc\n  return [\n    {\n      address: TokenA.networks[networkId].address,\n      name: TokenA.contractName,\n      icon: \"https://github.com/spothq/cryptocurrency-icons/blob/master/128/color/bcc.png?raw=true\"\n    },\n    {\n      address: TokenB.networks[networkId].address,\n      name: TokenB.contractName,\n      icon: \"https://github.com/spothq/cryptocurrency-icons/blob/master/128/color/usdc.png?raw=true\"\n    },\n    {\n      address: TokenC.networks[networkId].address,\n      name: TokenC.contractName,\n      icon: \"https://github.com/spothq/cryptocurrency-icons/blob/master/128/color/aave.png?raw=true\"\n    }\n  ]\n};\n\nexport const getExistingNftInstance = async (account, trustlessTrust) => {\n  const balance = await trustlessTrust.methods.balanceOf(account).call();\n  console.log(`-->${balance}`);\n  if (balance < 1) return new Promise((resolve, reject) => { resolve(-1) });\n\n  let tokenId = await trustlessTrust.methods.tokenOfOwnerByIndex(account, 0).call();\n  return new Promise((resolve, reject) => { resolve(tokenId) });\n}\n\nexport const mintNewInstance = async (account, trustlessTrust) => {\n  const instance = await trustlessTrust.methods.mint(account).send({from: account});\n  window.location.reload();\n}\n\nclass App extends Component {\n  state = { \n    storageValue: 0, \n    web3: null, \n    accounts: null, \n    contract: null, \n    sidebarOpen: false,\n    assetAddress: null\n  };\n\n  onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\n\n  onSetSidebarOpen(open) {\n    this.setState({ sidebarOpen: open });\n    document.querySelectorAll('[role=\"navigation\"]').forEach(x => x.classList.add(open ? \"sidebarOpen\" : \"sidebarClosed\"));\n  };\n\n  approveToken = async (address) => {\n    let token = await new this.state.web3.eth.Contract(\n      this.state.ERC20ABI.abi,\n      address,\n    );\n  \n    await token.methods.approve(this.state.trustlessTrust._address, INFINITE).send({ from: this.state.accounts[0] });\n    window.location.reload();\n  }\n\n  depositToken = async (address) => {\n    let token = await new this.state.web3.eth.Contract(\n      this.state.ERC20ABI.abi,\n      address,\n    );\n\n    const balance = await token.methods.balanceOf(this.state.accounts[0]).call();\n    await this.state.trustlessTrust.methods.deposit(this.state.trustlessTrustId, [address], [balance]).send({from : this.state.accounts[0]});\n    window.location.reload();\n  }\n\n  withdrawToken = async (address) => {\n    const balance = await this.state.trustlessTrust.methods.balanceOf(this.state.trustlessTrustId, address).call();\n    await this.state.trustlessTrust.methods.withdraw(this.state.trustlessTrustId, [address], [balance]).send({from : this.state.accounts[0]});\n    window.location.reload();\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the supported contracts\n      const networkId = await web3.eth.net.getId();\n      if (networkId === \"loading\") return;\n\n      const supportedTokens = await fetchAllTokens(web3, networkId);\n\n      const trustlessTrust = await new web3.eth.Contract(\n        TrustlessTrust.abi,\n        TrustlessTrust.networks[networkId].address\n      );\n\n      console.log(accounts[0]);\n\n      const trustlessTrustId = await getExistingNftInstance(accounts[0], trustlessTrust);\n\n      console.log(trustlessTrustId);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, supportedTokens, trustlessTrust, ERC20ABI, trustlessTrustId }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { web3, accounts, supportedTokens, trustlessTrust, trustlessTrustId } = this.state;\n\n    for (let t of supportedTokens) {\n      let token = await new web3.eth.Contract(\n        ERC20ABI.abi,\n        t.address,\n      );\n      t.walletBalance = await token.methods.balanceOf(accounts[0]).call();\n      t.nftBalance = await trustlessTrust.methods.balanceOf(trustlessTrustId, t.address).call();\n      t.approved = (await token.methods.allowance(accounts[0], trustlessTrust._address).call()) !== '0';\n    }\n\n    // Stores a given value, 5 by default.\n    // await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n    // const response = await erc20Base.methods.balanceOf(accounts[0]).call();\n\n    // Update state with the result.\n    // this.setState({ storageValue: response });\n\n    this.setState({ connectedWallet: accounts[0] })\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"walletConnect\">\n          <Button>\n            { this.state.accounts[0] ?\n              <span>\n                The connected address is: {this.state.accounts[0].substring(0, 8)}[...] <Identicon />\n              </span>\n            :\n            <span>\n              Please connect your wallet\n            </span>\n            }\n          </Button>\n        </div>\n\n        <div className=\"main\">\n          <h1>TrustlessTrust</h1>\n          <p>\n            This dApp wraps the assets in your wallet into an NFT, which is then transferable to any another account. To use this,\n          </p>\n          <ul>\n            <li>\n              Mint a new TrustlessTrust instance if you don't already have one\n            </li>\n            <li>\n              Approve whichever assets you want to wrap in it\n            </li>\n            <li>\n              Transfer those assets\n            </li>\n            <li>\n              Watch the balance on your TrustlessTrust increase accordingly\n            </li>\n          </ul>\n\n          <h2>Your Trustless Trust</h2>\n\n          <Button onClick={()=>mintNewInstance(this.state.accounts[0], this.state.trustlessTrust)} disabled={this.state.trustlessTrustId >= 0}>\n            Mint\n          </Button>\n          <h5>\n          { this.state.trustlessTrustId >= 0 ?\n            <div>\n              <span>\n                Your TrustlessTrust contract address is {this.state.trustlessTrust._address}[{this.state.trustlessTrustId}]\n              </span>\n              <Table \n                body={this.state.supportedTokens.filter((t) => t.nftBalance > 0)} \n                withdraw={this.withdrawToken} \n                view={NFT_VIEW}\n                />\n            </div>\n            :\n            <span></span>\n          }\n          </h5>\n\n          <h2>Approve and transfer tokens</h2>\n          \n          <Table \n            body={this.state.supportedTokens.filter((t) => t.walletBalance > 0)} \n            approve={this.approveToken} \n            deposit={this.depositToken} \n            view={WALLET_VIEW}\n          />\n        </div>\n\n        {/* <Sidebar\n          sidebar={\n            <div className=\"sidebarContent\">\n              <h1>Getting Started</h1>\n              \n            </div>\n          }\n          open={this.state.sidebarOpen}\n          onSetOpen={this.onSetSidebarOpen}\n          styles={{ sidebar: { \n            background: \"white\",\n            width: \"300px\"\n          } }}\n        >\n        </Sidebar>\n        <Button onClick={()=>this.onSetSidebarOpen(!this.state.sidebarOpen)} className=\"sidebarNav\">\n            { this.state.sidebarOpen\n              ? \n              <span>\n                   <FontAwesomeIcon icon=\"times-circle\" />\n              </span> \n              : \n              <span>\n                <FontAwesomeIcon icon=\"chevron-right\" />\n              </span>\n            }\n          </Button> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}